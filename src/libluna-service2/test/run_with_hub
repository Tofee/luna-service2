#!/bin/bash

# @@@LICENSE
#
#      Copyright (c) 2014 LG Electronics, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# LICENSE@@@

usage()
{
	cat <<EOF
Usage: `basename $0` <SOURCE_DIR> <BUILD_DIR> <CONFIG_FILE>

EOF

column -t -s\& <<EOF
<SOURCE_DIR>    &    Path to the source directory root
<BUILD_DIR>     &    Path to the build directory root
<CONFIG_FILE>   &    Test environment configuration
EOF
}

die()
{
	echo >&2 $*
	exit 1
}

if [[ $# != 3 ]]; then
	usage
	exit 1
fi

source_dir=`readlink -f $1`
build_dir=`readlink -f $2`
config_file=`readlink -f $3`

# Directory where the configuration file is located.
# All paths in the configuration file should be relative to this.
config_dir=`readlink -f $(dirname $config_file)`

# Allocate a temporary directory for the hub configuration.
conf_root=`mktemp -d /tmp/ls-hubd-conf.XXXXXXXX` || die "Failed to allocate temp directory"
# Custom directory for hubs' sockets
hub_dir=$conf_root/tmp

cleanup()
{
	# Kill helper services
	[[ ${#service_pid_to_kill} > 0 ]] && kill ${service_pid_to_kill[@]}
	# Kill spawn hubs
	[[ ${#hub_pids} > 0 ]] && kill ${hub_pids[@]}
	wait  # until the hubs exit
	rm -rf $conf_root || echo >&2 "Failed to remove the temp directory"
}

trap cleanup EXIT

install_files()
{
	# Prepare directories to avoid ENOENT
	mkdir -p $conf_root/var/palm/ls2/{roles,services}/{prv,pub}
	mkdir -p $conf_root/usr/share/ls2/roles/{prv,pub}
	mkdir -p $conf_root/usr/share/dbus-1/{system-,}services

	# Variables are defined in the configuration file
	declare -a services dynamic_services helper_services
	declare -A service_pub service_prv
	declare -A role_pub role_prv

	# Place no-op to custom command
	run_custom_command()
	{
		true
	}

	# Read configuration
	source $config_file || die "Failed to source config file"

	get_full_exe_path()
	{
		echo $build_dir/${config_dir#$source_dir}/$1
	}

	install_service()
	{
		service_exe=$1
		is_dynamic=$2
		pub=$3   # other arguments list service files to install

		dst=$conf_root/var/palm/ls2/services/$pub
		for svc_file in ${@:4}; do
			target=$dst/`basename $svc_file`
			if [[ -f "$config_dir/$svc_file" ]]; then
				cp -a "$config_dir/$svc_file" $dst
			else
				cat >$target <<END
[D-BUS Service]
Name=`basename ${svc_file%.service}`
Exec=
Type=$is_dynamic
END
			fi
			sed -i -e "s|^Exec=.*$|Exec=${service_exe}|" $target
		done
	}

	install_role()
	{
		service_exe=$1
		pub=$2   # other arguments list role files to install

		dst=$conf_root/var/palm/ls2/role/$1
		for role_file in ${@:3}; do
			target=$dst/`basename $role_file`
			if [[ -f "$config_dir/$role_file" ]]; then
				cp -a "$config_dir/$role_file" $dst
			else
				cat >$target <<END
{
    "role": {
        "exeName": "",
        "type": "regular",
        "allowedNames": ["*"]
    },
    "permissions": [
        {
            "service": "*",
            "inbound": ["*"],
            "outbound": ["*"]
        }
    ]
}
END
			fi
			sed -i -e "s|^\"exeName\".*$|\"exeName\":\"${service_exe}\",|" $dst/`basename $role_file`
		done
	}

	# Install service and role files for every described service
	for service in ${services[@]}; do
		service_exe=`get_full_exe_path $service`
		# Gather static services to launch (the dynamic ones are launched by the hub).
		services_to_spawn+=($service_exe)

		install_service $service_exe static pub ${service_pub[$service]}
		install_service $service_exe static prv ${service_prv[$service]}

		install_role $service_exe pub ${role_pub[$service]}
		install_role $service_exe prv ${role_prv[$service]}
	done

	for service in ${helper_services[@]}; do
		service_exe=`get_full_exe_path $service`
		# Gather helper services to launch and kill after test
		services_to_spawn_and_kill+=($service_exe)

		install_service $service_exe static pub ${service_pub[$service]}
		install_service $service_exe static prv ${service_prv[$service]}

		install_role $service_exe pub ${role_pub[$service]}
		install_role $service_exe prv ${role_prv[$service]}
	done

	for service in ${dynamic_services[@]}; do
		service_exe=`get_full_exe_path $service`

		install_service $service_exe dynamic pub ${service_pub[$service]}
		install_service $service_exe dynamic prv ${service_prv[$service]}

		install_role $service_exe pub ${role_pub[$service]}
		install_role $service_exe prv ${role_prv[$service]}
	done
}

install_files

spawn_hubd()
{
	pubpriv=$1

	mkdir -p $hub_dir

	old_conf=$build_dir/Configured/files/conf/ls-${pubpriv}.conf
	conf=$conf_root/etc/luna-service2/ls-${pubpriv}.conf && mkdir -p `dirname $conf`

	old_root=`perl -ne '$_ =~ m|PidDirectory=(.*)/var/run/ls2| and print "$1\n";' $old_conf` \
		|| die "Failed to detect old root"

	sed -e "s|$old_root|$conf_root|g" \
		-e "s|ExecPrefix=.*|ExecPrefix=|g" \
		$old_conf > $conf \
		|| die "Failed to prepare ls-${pubpriv}.conf"

	# Switch on or off security depending on the configuration file.
	# This chunk implies the config file has been sourced.
	security_enabled=false
	[[ "$security" == "enabled" ]] && security_enabled=true
	sed -i -e "s|^Enabled=.*$|Enabled=$security_enabled|g" $conf

	[[ $pubpriv == public ]] && pub_opt=-p

	# Launch the hub
	LS_HUB_LOCAL_SOCKET_DIRECTORY=$hub_dir $build_dir/src/ls-hubd/ls-hubd -c $conf $pub_opt &
	[[ $? -eq 0 ]] || die "Failed to launch $pubpriv ls-hubd"
	hub_pids+=($!)
}

# drop artifacts from prev. runs (not always we have clean shutdown)
[ -S $hub_dir/com.palm.public_hub ] && rm $hub_dir/com.palm.public_hub
[ -S $hub_dir/com.palm.private_hub ] && rm $hub_dir/com.palm.private_hub
killall -KILL ls-hubd

spawn_hubd private
spawn_hubd public

while [[ ! -S $hub_dir/com.palm.private_hub || ! -S $hub_dir/com.palm.public_hub ]]; do
	sleep 0.1
done

run_custom_command

for service in ${services_to_spawn_and_kill[@]}; do
	echo "Launching $service"
	LS_HUB_LOCAL_SOCKET_DIRECTORY=$hub_dir $service &
	[[ $? -eq 0 ]] || die "Failed to start $service"
	service_pid_to_kill+=($!)
done
for service in ${services_to_spawn[@]}; do
	echo "Launching $service"
	LS_HUB_LOCAL_SOCKET_DIRECTORY=$hub_dir $service &
	[[ $? -eq 0 ]] || die "Failed to start $service"
	service_pid+=($!)
done
for pid in ${service_pid[@]}; do
	wait $pid
	[[ $? -eq 0 ]] || die "Failure detected"
done
